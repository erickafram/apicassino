[1,["754Fd32t5I07QMJHdox9qo","ecpdLyjvZBwrvm+cedCcQy","589dvX6sBMh7EYrtPq76Qz","37paSTHi5JFbQKyLY+bRYN"],["_effectAsset","root","blurEffectSprite","blurEffectCamera","node","data","dualBlur","sprite","materialDown","materialUp"],[["cc.Node",["_name","_parent","_components","_prefab","_contentSize","_trs"],2,1,2,4,5,7],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.Material",["_name","_techniqueIndex","_techniqueData"],1,11],["cc.Prefab",["_name"],2],["cc.Node",["_name","_children","_components","_prefab"],2,2,9,4],["eed9e/4gLxCi7bFTPsfE/o6",["node","blurEffectCamera","blurEffectSprite"],3,1,1,1],["cc.Camera",["_cullingMask","_clearFlags","_depth","_nearClip","node"],-1,1],["c359egTmVVMPJEREYcJ8z+9",["node","camera"],3,1,1],["cc.Sprite",["_sizeMode","_isTrimmedMode","node","_materials"],1,1,3],["9dc80rabGFIHJ6+8yAPdf0q",["node"],3,1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[1,0,1,2,2],[3,0,2],[4,0,1,2,3,2],[0,0,1,2,3,4,2],[0,0,1,2,3,5,2],[5,0,1,2,1],[1,1,2,1],[6,0,1,2,3,4,5],[7,0,1,1],[8,0,1,2,3,3],[9,0,1],[2,0,1,2,3],[2,0,2,2],[10,0,1,2,4]],[[[[1,"blur_effect_controller"],[2,"blur_effect_controller",[-5,-6],[[5,-4,-3,-2]],[6,-1,0]],[3,"blur_effect_sprite",1,[-7,-8],[0,"4a1siI1opAU6UP5Gf6/qaX",1,0],[5,1080,2340]],[4,"blur_effect_camera",1,[-9,-10],[0,"2dpMIBXPtGQIGMvBxR5OlZ",1,0],[0,0,554.25626,0,0,0,1,1,1,1]],[7,-2,7,-2,0.1,3],[8,3,4],[9,2,false,2,[0]],[10,2]],0,[0,1,1,0,2,2,0,3,5,0,4,1,0,-1,3,0,-2,2,0,-1,6,0,-2,7,0,-1,4,0,-2,5,0,5,1,5,6,7,5,7,6,10],[0,7,7],[-1,8,9],[1,2,3]],[[[11,"DualBlurUp",1,[{},"0",11,[{"defines":{"USE_TEXTURE":true}},"props",11,[{"offset":5},"resolution",8,[0,1920,1080]]]]]],0,0,[0],[0],[0]],[[[12,"DualBlurDown",[{},"0",11,[{"defines":{"USE_TEXTURE":true}},"props",11,[{"offset":5},"resolution",8,[0,1920,1080]]]]]],0,0,[0],[0],[0]],[[[13,"DualBlur",[{"hash":1375768963,"record":null,"name":"DualBlur|vs:Down|fs:Down","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_uv1;\nout vec4 v_uv2;\nout vec4 v_uv3;\nout vec4 v_uv4;\n#endif\nuniform Properties {\n  vec2 resolution;\n  float offset;\n};\nvec4 Down () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  vec2 uv = a_uv0;\n  vec2 texelSize = 0.5 / resolution;\n  v_uv0 = uv;\n  v_uv1.xy = uv - texelSize * vec2(offset);\n  v_uv1.zw = uv + texelSize * vec2(offset);\n  v_uv2.xy = uv - vec2(texelSize.x, -texelSize.y) * vec2(offset);\n  v_uv2.zw = uv + vec2(texelSize.x, -texelSize.y) * vec2(offset);\n  #endif\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = Down(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nin vec4 v_uv1;\nin vec4 v_uv2;\nin vec4 v_uv3;\nin vec4 v_uv4;\nuniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 resolution;\n  float offset;\n};\nvec4 Down () {\n  vec4 sum = vec4(1);\n  #if USE_TEXTURE\n    sum = texture2D(texture, v_uv0) * 4.;\n    sum += texture2D(texture, v_uv1.xy);\n    sum += texture2D(texture, v_uv1.zw);\n    sum += texture2D(texture, v_uv2.xy);\n    sum += texture2D(texture, v_uv2.zw);\n    sum *= 0.125;\n  #endif\n  sum *= v_color;\n  ALPHA_TEST(sum);\n  return CCFragOutput(sum);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = Down(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_uv1;\nvarying vec4 v_uv2;\nvarying vec4 v_uv3;\nvarying vec4 v_uv4;\n#endif\nuniform vec2 resolution;\nuniform float offset;\nvec4 Down () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  vec2 uv = a_uv0;\n  vec2 texelSize = 0.5 / resolution;\n  v_uv0 = uv;\n  v_uv1.xy = uv - texelSize * vec2(offset);\n  v_uv1.zw = uv + texelSize * vec2(offset);\n  v_uv2.xy = uv - vec2(texelSize.x, -texelSize.y) * vec2(offset);\n  v_uv2.zw = uv + vec2(texelSize.x, -texelSize.y) * vec2(offset);\n  #endif\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = Down(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nvarying vec4 v_uv1;\nvarying vec4 v_uv2;\nvarying vec4 v_uv3;\nvarying vec4 v_uv4;\nuniform sampler2D texture;\n#endif\nvec4 Down () {\n  vec4 sum = vec4(1);\n  #if USE_TEXTURE\n    sum = texture2D(texture, v_uv0) * 4.;\n    sum += texture2D(texture, v_uv1.xy);\n    sum += texture2D(texture, v_uv1.zw);\n    sum += texture2D(texture, v_uv2.xy);\n    sum += texture2D(texture, v_uv2.zw);\n    sum *= 0.125;\n  #endif\n  sum *= v_color;\n  ALPHA_TEST(sum);\n  return CCFragOutput(sum);\n}\nvoid main() { gl_FragColor = Down(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]}],"blocks":[{"name":"Properties","binding":0,"members":[{"name":"resolution","type":14,"count":1},{"name":"offset","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]},{"hash":3306278851,"record":null,"name":"DualBlur|vs:Up|fs:Up","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_uv1;\nout vec4 v_uv2;\nout vec4 v_uv3;\nout vec4 v_uv4;\n#endif\nuniform Properties {\n  vec2 resolution;\n  float offset;\n};\nvec4 Up () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  vec2 uv = a_uv0;\n  vec2 texelSize = 0.5 / resolution;\n  v_uv0 = uv;\n  v_uv1.xy = uv + vec2(-texelSize.x * 2., 0) * offset;\n  v_uv1.zw = uv + vec2(-texelSize.x, texelSize.y) * offset;\n  v_uv2.xy = uv + vec2(0, texelSize.y * 2.) * offset;\n  v_uv2.zw = uv + texelSize * offset;\n  v_uv3.xy = uv + vec2(texelSize.x * 2., 0) * offset;\n  v_uv3.zw = uv + vec2(texelSize.x, -texelSize.y) * offset;\n  v_uv4.xy = uv + vec2(0, -texelSize.y * 2.) * offset;\n  v_uv4.zw = uv - texelSize * offset;\n  #endif\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = Up(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nin vec4 v_uv1;\nin vec4 v_uv2;\nin vec4 v_uv3;\nin vec4 v_uv4;\nuniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 resolution;\n  float offset;\n};\nvec4 Up () {\n  vec4 sum = vec4(1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv1.xy);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv1.xy + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    sum.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    sum.a *= texture_tmp.a;\n  #else\n    sum *= texture_tmp;\n  #endif\n    sum += texture2D(texture, v_uv1.zw) * 2.;\n    sum += texture2D(texture, v_uv2.xy);\n    sum += texture2D(texture, v_uv2.zw) * 2.;\n    sum += texture2D(texture, v_uv3.xy);\n    sum += texture2D(texture, v_uv3.zw) * 2.;\n    sum += texture2D(texture, v_uv4.xy);\n    sum += texture2D(texture, v_uv4.zw) * 2.;\n    sum *= 0.0833;\n  #endif\n  sum *= v_color;\n  ALPHA_TEST(sum);\n  return CCFragOutput(sum);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = Up(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_uv1;\nvarying vec4 v_uv2;\nvarying vec4 v_uv3;\nvarying vec4 v_uv4;\n#endif\nuniform vec2 resolution;\nuniform float offset;\nvec4 Up () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  vec2 uv = a_uv0;\n  vec2 texelSize = 0.5 / resolution;\n  v_uv0 = uv;\n  v_uv1.xy = uv + vec2(-texelSize.x * 2., 0) * offset;\n  v_uv1.zw = uv + vec2(-texelSize.x, texelSize.y) * offset;\n  v_uv2.xy = uv + vec2(0, texelSize.y * 2.) * offset;\n  v_uv2.zw = uv + texelSize * offset;\n  v_uv3.xy = uv + vec2(texelSize.x * 2., 0) * offset;\n  v_uv3.zw = uv + vec2(texelSize.x, -texelSize.y) * offset;\n  v_uv4.xy = uv + vec2(0, -texelSize.y * 2.) * offset;\n  v_uv4.zw = uv - texelSize * offset;\n  #endif\n  v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = Up(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nvarying vec4 v_uv1;\nvarying vec4 v_uv2;\nvarying vec4 v_uv3;\nvarying vec4 v_uv4;\nuniform sampler2D texture;\n#endif\nvec4 Up () {\n  vec4 sum = vec4(1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv1.xy);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv1.xy + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    sum.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    sum.a *= texture_tmp.a;\n  #else\n    sum *= texture_tmp;\n  #endif\n    sum += texture2D(texture, v_uv1.zw) * 2.;\n    sum += texture2D(texture, v_uv2.xy);\n    sum += texture2D(texture, v_uv2.zw) * 2.;\n    sum += texture2D(texture, v_uv3.xy);\n    sum += texture2D(texture, v_uv3.zw) * 2.;\n    sum += texture2D(texture, v_uv4.xy);\n    sum += texture2D(texture, v_uv4.zw) * 2.;\n    sum *= 0.0833;\n  #endif\n  sum *= v_color;\n  ALPHA_TEST(sum);\n  return CCFragOutput(sum);\n}\nvoid main() { gl_FragColor = Up(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"Properties","binding":0,"members":[{"name":"resolution","type":14,"count":1},{"name":"offset","type":13,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"name":"Down","passes":[{"name":"Down","program":"DualBlur|vs:Down|fs:Down","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"resolution":{"type":14,"value":[1080,2340]},"offset":{"type":13,"value":[1],"editor":{"range":[0,100]}},"alphaThreshold":{"type":13,"value":[0.5]}}}]},{"name":"Up","passes":[{"name":"Up","program":"DualBlur|vs:Up|fs:Up","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"resolution":{"type":14,"value":[1080,2340]},"offset":{"type":13,"value":[1],"editor":{"range":[0,100]}},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]]]]