#!/bin/bash

# =====================================================
# VERIFICA√á√ÉO DO SERVIDOR - PR√â-DEPLOY
# =====================================================
# Verifica se o servidor est√° pronto para o deploy
# =====================================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[CHECK] $1${NC}"
}

error() {
    echo -e "${RED}[‚ùå] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[‚ö†Ô∏è] $1${NC}"
}

success() {
    echo -e "${GREEN}[‚úÖ] $1${NC}"
}

info() {
    echo -e "${BLUE}[‚ÑπÔ∏è] $1${NC}"
}

echo -e "${BLUE}"
cat << "EOF"
 ____   ____   ____  ___  _____ _____   _    ____ ___ 
|  _ \ / ___| / ___|/ _ \|  ___|_   _| / \  |  _ \_ _|
| |_) | |  _  \___ \ | | | |_    | |  / _ \ | |_) | | 
|  __/| |_| |  ___) | |_| |  _|   | | / ___ \|  __/| | 
|_|    \____| |____/ \___/|_|     |_|/_/   \_\_|  |___|
                                                       
        VERIFICA√á√ÉO PR√â-DEPLOY DO SERVIDOR
EOF
echo -e "${NC}"

log "Iniciando verifica√ß√£o do servidor..."
echo ""

# =====================================================
# VERIFICAR SISTEMA OPERACIONAL
# =====================================================

log "Verificando sistema operacional..."

if [ -f /etc/os-release ]; then
    . /etc/os-release
    success "Sistema: $PRETTY_NAME"
    
    # Verificar se √© Ubuntu/Debian
    if [[ "$ID" == "ubuntu" ]] || [[ "$ID" == "debian" ]]; then
        success "Sistema compat√≠vel (Ubuntu/Debian)"
    else
        warning "Sistema pode n√£o ser totalmente compat√≠vel. Recomendado: Ubuntu 18.04+ ou Debian 10+"
    fi
else
    error "N√£o foi poss√≠vel identificar o sistema operacional"
fi

echo ""

# =====================================================
# VERIFICAR PRIVIL√âGIOS
# =====================================================

log "Verificando privil√©gios..."

if [[ $EUID -eq 0 ]]; then
    error "Voc√™ est√° executando como root. Use um usu√°rio com sudo."
    exit 1
else
    success "Usu√°rio n√£o √© root ‚úì"
fi

# Verificar sudo
if sudo -n true 2>/dev/null; then
    success "Usu√°rio tem privil√©gios sudo ‚úì"
else
    if sudo -v; then
        success "Usu√°rio tem privil√©gios sudo ‚úì"
    else
        error "Usu√°rio n√£o tem privil√©gios sudo"
        exit 1
    fi
fi

echo ""

# =====================================================
# VERIFICAR NODE.JS
# =====================================================

log "Verificando Node.js..."

if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    success "Node.js encontrado: $NODE_VERSION"
    
    # Verificar vers√£o
    NODE_MAJOR=$(echo $NODE_VERSION | cut -d'.' -f1 | sed 's/v//')
    if [ "$NODE_MAJOR" -ge 16 ]; then
        success "Vers√£o do Node.js √© compat√≠vel (v$NODE_MAJOR) ‚úì"
        
        if [ "$NODE_MAJOR" -eq 22 ]; then
            success "Node.js 22 LTS detectado - PERFEITO! ‚úì"
        fi
    else
        error "Vers√£o do Node.js muito antiga ($NODE_VERSION). M√≠nimo: Node.js 16+"
    fi
else
    error "Node.js n√£o encontrado"
    info "Instale Node.js 18+ ou use o script deploy-production.sh"
fi

# Verificar NPM
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    success "NPM encontrado: $NPM_VERSION ‚úì"
else
    error "NPM n√£o encontrado"
fi

echo ""

# =====================================================
# VERIFICAR PORTAS
# =====================================================

log "Verificando portas..."

# Verificar porta 80 (HTTP)
if netstat -tuln 2>/dev/null | grep -q ":80 " || ss -tuln 2>/dev/null | grep -q ":80 "; then
    warning "Porta 80 j√° est√° em uso"
    netstat -tuln 2>/dev/null | grep ":80 " || ss -tuln 2>/dev/null | grep ":80 "
else
    success "Porta 80 dispon√≠vel ‚úì"
fi

# Verificar porta 443 (HTTPS)
if netstat -tuln 2>/dev/null | grep -q ":443 " || ss -tuln 2>/dev/null | grep -q ":443 "; then
    warning "Porta 443 j√° est√° em uso"
    netstat -tuln 2>/dev/null | grep ":443 " || ss -tuln 2>/dev/null | grep ":443 "
else
    success "Porta 443 dispon√≠vel ‚úì"
fi

# Verificar porta 3000 (API)
if netstat -tuln 2>/dev/null | grep -q ":3000 " || ss -tuln 2>/dev/null | grep -q ":3000 "; then
    warning "Porta 3000 j√° est√° em uso"
    netstat -tuln 2>/dev/null | grep ":3000 " || ss -tuln 2>/dev/null | grep ":3000 "
else
    success "Porta 3000 dispon√≠vel ‚úì"
fi

echo ""

# =====================================================
# VERIFICAR RECURSOS DO SISTEMA
# =====================================================

log "Verificando recursos do sistema..."

# Verificar RAM
TOTAL_RAM=$(free -m | awk 'NR==2{printf "%.0f", $2}')
if [ "$TOTAL_RAM" -ge 1024 ]; then
    success "RAM: ${TOTAL_RAM}MB ‚úì"
else
    warning "RAM baixa: ${TOTAL_RAM}MB (recomendado: 1GB+)"
fi

# Verificar espa√ßo em disco
DISK_SPACE=$(df -BG / | awk 'NR==2{print $4}' | sed 's/G//')
if [ "$DISK_SPACE" -ge 5 ]; then
    success "Espa√ßo em disco: ${DISK_SPACE}GB dispon√≠vel ‚úì"
else
    warning "Pouco espa√ßo em disco: ${DISK_SPACE}GB (recomendado: 5GB+)"
fi

# Verificar CPU
CPU_CORES=$(nproc)
success "CPU: $CPU_CORES core(s) ‚úì"

echo ""

# =====================================================
# VERIFICAR CONECTIVIDADE
# =====================================================

log "Verificando conectividade..."

# Verificar conex√£o com internet
if ping -c 1 google.com &> /dev/null; then
    success "Conex√£o com internet ‚úì"
else
    error "Sem conex√£o com internet"
fi

# Verificar se pode resolver DNS
if nslookup google.com &> /dev/null; then
    success "Resolu√ß√£o DNS funcionando ‚úì"
else
    warning "Problemas com resolu√ß√£o DNS"
fi

echo ""

# =====================================================
# VERIFICAR SOFTWARES EXISTENTES
# =====================================================

log "Verificando softwares existentes..."

# Verificar PM2
if command -v pm2 &> /dev/null; then
    PM2_VERSION=$(pm2 --version)
    success "PM2 j√° instalado: $PM2_VERSION ‚úì"
else
    info "PM2 n√£o instalado (ser√° instalado durante o deploy)"
fi

# Verificar Nginx
if command -v nginx &> /dev/null; then
    NGINX_VERSION=$(nginx -v 2>&1 | cut -d' ' -f3)
    success "Nginx j√° instalado: $NGINX_VERSION ‚úì"
else
    info "Nginx n√£o instalado (ser√° instalado durante o deploy)"
fi

# Verificar Certbot
if command -v certbot &> /dev/null; then
    success "Certbot j√° instalado ‚úì"
else
    info "Certbot n√£o instalado (ser√° instalado durante o deploy)"
fi

# Verificar MySQL/MariaDB
if command -v mysql &> /dev/null; then
    MYSQL_VERSION=$(mysql --version | cut -d' ' -f6 | cut -d',' -f1)
    success "MySQL/MariaDB encontrado: $MYSQL_VERSION ‚úì"
else
    warning "MySQL/MariaDB n√£o encontrado - voc√™ precisar√° instalar"
fi

echo ""

# =====================================================
# VERIFICAR ARQUIVOS DO PROJETO
# =====================================================

log "Verificando arquivos do projeto..."

if [ -f "package.json" ]; then
    success "package.json encontrado ‚úì"
    
    # Verificar se tem script de build
    if grep -q '"build"' package.json; then
        success "Script de build encontrado ‚úì"
    else
        warning "Script de build n√£o encontrado em package.json"
    fi
    
    # Verificar se tem TypeScript
    if grep -q 'typescript' package.json; then
        success "TypeScript detectado ‚úì"
    else
        info "TypeScript n√£o detectado"
    fi
else
    error "package.json n√£o encontrado - execute no diret√≥rio do projeto"
fi

if [ -f "src/index.ts" ] || [ -f "src/index.js" ]; then
    success "Arquivo principal encontrado ‚úì"
else
    warning "Arquivo principal (src/index.ts/js) n√£o encontrado"
fi

if [ -f "deploy-existing-node.sh" ]; then
    success "Script de deploy encontrado ‚úì"
else
    warning "Script de deploy n√£o encontrado"
fi

echo ""

# =====================================================
# RESUMO E RECOMENDA√á√ïES
# =====================================================

echo -e "${BLUE}=== RESUMO DA VERIFICA√á√ÉO ===${NC}"
echo ""

# Determinar qual script usar
if command -v node &> /dev/null; then
    NODE_MAJOR=$(echo $(node --version) | cut -d'.' -f1 | sed 's/v//')
    if [ "$NODE_MAJOR" -ge 16 ]; then
        success "‚úÖ SERVIDOR PRONTO PARA DEPLOY!"
        echo ""
        info "üöÄ RECOMENDA√á√ÉO: Use o script para servidor existente:"
        echo -e "${GREEN}chmod +x deploy-existing-node.sh${NC}"
        echo -e "${GREEN}./deploy-existing-node.sh${NC}"
    else
        warning "‚ö†Ô∏è  Node.js precisa ser atualizado"
        echo ""
        info "üöÄ RECOMENDA√á√ÉO: Use o script completo:"
        echo -e "${GREEN}chmod +x deploy-production.sh${NC}"
        echo -e "${GREEN}./deploy-production.sh${NC}"
    fi
else
    warning "‚ö†Ô∏è  Node.js n√£o encontrado"
    echo ""
    info "üöÄ RECOMENDA√á√ÉO: Use o script completo:"
    echo -e "${GREEN}chmod +x deploy-production.sh${NC}"
    echo -e "${GREEN}./deploy-production.sh${NC}"
fi

echo ""
info "üìã CHECKLIST PR√â-DEPLOY:"
echo "  ‚ñ° Dom√≠nio apontando para este servidor"
echo "  ‚ñ° Banco MySQL criado e configurado"
echo "  ‚ñ° Portas 80, 443 e 3000 liberadas no firewall"
echo "  ‚ñ° Arquivos do projeto no servidor"

echo ""
log "Verifica√ß√£o conclu√≠da! üéØ"
